# Generated by Django 3.0.5 on 2020-04-29 06:55

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('first_name', models.CharField(help_text='Имя', max_length=150)),
                ('last_name', models.CharField(help_text='Фамилия', max_length=150)),
                ('middle_name', models.CharField(help_text='Отчество', max_length=150)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.SmallIntegerField(choices=[(0, 'Undefined'), (1, 'Male'), (2, 'Female')], default=0)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата регистрации')),
                ('points', models.IntegerField(default=100, help_text='Очки')),
                ('rank', models.SmallIntegerField(choices=[(0, 'I'), (1, 'II'), (2, 'III'), (3, 'IV'), (4, 'Master Candidate'), (5, 'Master of Sport'), (6, 'Grandmaster')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
